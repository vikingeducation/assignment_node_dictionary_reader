const LOAD = require('load');
const DICT = require('dict');
const SEARCH = require('search');
//level 1 === load

module.exports = {
  directories : null, // [ 'dictionary.json', 'jsonTestFile.json' ]
  jsonFile: null,

  welcome(){
    console.log('Welcome to the Node Dictionary Reader!');
    console.log('======================================');
    console.log('Enter q! to exit');
    console.log();
  },

  selectDirectory(){
    console.log('Select a dictionary index number to load:');
    LOAD.listDataFiles().then((data) => {
      data.forEach((file, i) => {
        console.log(`${i + 1} ${file}`);
      });
    directories = data;
    });
  },

  onData(data){
    data = data.trim();

    if (data === "q!") {
      console.log('Exiting program');
      process.stdin.pause();
      // process.stdin.removeListener('data', this.onData);
    } 

    else {
        if (level === 1){
          if (Number(data) > 0 && 
            directories.length >= Number(data) &&
            !isNaN(data) ) {
                var index = Number(data) - 1;

                LOAD.loadDataFile( directories[index] ).then((json) => {
                  jsonFile = JSON.parse(json)

                  DICT.getStats( jsonFile );

                  console.log('What kind of search?');
                  console.log('1 - Exact');
                  console.log('2 - Partial');
                  console.log('3 - Begins With');
                  console.log('4 - Ends With');
                  level = 2;
                });

          }
          else {
            console.log('Please enter a valid number');
          }
        }

        else if (level === 2 && Number(data) > 0 && Number(data) <= 4 && !isNaN(data) ){
          switch (Number(data)) {
            case 1:
              chosenMethod = SEARCH.exactMatch;
              break;

            case 2:
              chosenMethod = SEARCH.partialMatch;
              break;

            case 3:
              chosenMethod = SEARCH.beginsWithMatch;
              break;

            case 4:
              chosenMethod = SEARCH.endsWithMatch;
            break;
          }
          level = 3;
          console.log('Enter the search term');
        }

        else if (level === 3) {
          let results = chosenMethod(jsonFile, data);
          console.log(`Found ${results.length} matches:`)

          results.forEach((word, i) => {
            console.log(`${i + 1} - ${word}`);
          })
        }




    }
    //

    // if (Number(data) > 0 && 
    //     directories.length >= Number(data) &&
    //     !isNaN(data) ) {

    //   if (level === 1) {
    //     var index = Number(data) - 1;

    //     LOAD.loadDataFile( directories[index] ).then((jsonFile) => {
    //       jsonFile = JSON.parse(jsonFile)

    //       DICT.getStats( jsonFile );

    //       //test
    //       var xx = SEARCH.exactMatch(jsonFile, 'angrily')
    //       console.log(xx)

    //       //test
    //     });
    //   }
      
    // } else {
    // }
  },

  beginProgram(){
    level = 1;
    this.welcome();

    process.stdin.resume();
    process.stdin.setEncoding('utf8');

    // if (level == 1) {
       directories = this.selectDirectory();
    // }


    //set listener
    process.stdin.on('data', this.onData);
    
  }
  
//  
};